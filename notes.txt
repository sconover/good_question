Hmmm.  A good question arel engine?.  Would rock, think about this.  Might be perfect...

Solr arel engine?  Separate project,..i think maybe i must do this...
Acceptance: join relational table with solr query...  






xregarding "basics" do
    
    def rack_client
      Rack::Client.new("https://spreadsheets.google.com")
    end

    
    test_GET "/feeds/worksheets/0AtBEjDISy19UdDB6My1DYllod04xVlZ1dkR5SlJSTEE/private/full",
             {"GData-Version" => "3.0"} do |xml|
               p xml.to_s
      # assert{ json.collect{|entry|entry["text"]} == [
      #           "dog bit me",
      #           "watching paint dry",
      #           "i went to the store"
      #         ] }
    end
  
    # test_GET "/1/statuses/user_timeline.xml?screen_name=gq_amy" do |xml|
    #       assert{ xml.xpath("//text").texts == [
    #                 "dog bit me",
    #                 "watching paint dry",
    #                 "i went to the store"
    #               ] }
    #     end
    
  end


# http://www.google.com/calendar/feeds/developer-calendar@google.com/public/full?alt=json

# https://spreadsheets.google.com/ccc?key=0AtBEjDISy19UdDB6My1DYllod04xVlZ1dkR5SlJSTEE&hl=en&authkey=COC51PoN


========================

Must have a nice clean high-level out-of-the-box way of specifying / mapping...
  

/v1/widgets?show=id,name&q='color=pink'

RackRuleBuilder.new(:my_get_request) {

  declare_path(:version, :resource_type)
  declare_query_string("show" => :show, "q" => :criteria, "sort" => :sort)
  declare_headers("show" => :show, "q" => :criteria, "sort" => :sort)

  rule(:version) {
    declare_range("Version must be a number between 1 and 2"){{:range => 1..2}}
  }

  rule(:resource_type) {
    declare_list{{:allowed => %w{widgets foosballs}}}
  }

  rule(:show) {
    declare_list{{:allowed => %w{columns from a table}}}
  }

  rule(:criteria) {
    
  }
}

==================

query_precursor = SimpleRackGetRequest::RULE.apply_to(rack_request).satisfied!.memory

Query::RULE.apply_to(query_precursor).satisfied!

Query.new(query_precursor)


....these are excuses to prove out focused rule builders (validation / transformation)
  ...ok now we're getting to grammars

output is a parser.  parser parses and returns a tree.

domain-specific builders

simple rack get request

rack post request in json format


===================

what about going straight to valid query input?
  ...no...separate builders...

tools for making low-level requests into structs
  ...a kind of language for validating and pulling these apart
    (rack request => struct [array, hash, primitives])

tools for making structs into higher-level query input
  ...a language for taking a struct and making it into higher-level objects
   (struct => attributes, criteria, etc)





SimpleRackGetRequest::RULE.apply_to(rack_request).satisfied!.memory


rack_request
  validate and transform...



Query.new(QueryPrecursor::RULE.apply_to(SimpleRackGetRequest::RULE.apply_to(rack_request).memory)).memory)




=================

now generalize this:


          declare do |call|
            args[:allowed_resource_types].include?(resource_type) ||
              call.fail("'#{resource_type}' is not an allowed resource type.", 
                        :allowed => args[:allowed_resource_types],
                        :not_allowed => [resource_type])
          end
          
          declare do |call|
            not_allowed = (show - args[:allowed_show_attributes])
            not_allowed.empty? ||
              call.fail("#{not_allowed.join(", ")} not allowed in show.", 
                        :allowed => args[:allowed_show_attributes],
                        :not_allowed => not_allowed)
          end

declare_in_list(show, args[:allowed_show_attributes], '#{not_allowed} not allowed in show.')

where do I put that?

reopen DeclarationContext?
  too late?
  it's global.

create a module, extend?

...other options.

must be basic ruby.


how best to extract commonality?  where should that stuff go?




========================

queries don't have versions in them

this is strictly a db/solr - like query.

concentrate on making arel work first

arel as a source of metadata for validation purposes
arel/db as the target of the query

/v1/widgets?sort=price.desc&show=id,price

mapped to db:

validations: order matters

- version - valid?
- widgets - is it a valid table?
  - convenient way to get an array of table strings from your db
    ...this is the "default"
- predicate
  - attribute list based on the column defaults
  - column provides default attribute type
    - ... and value conforms to the type
- show attributes - are these valid attributes for the given table?
  - convenient way to get list of attributes for a table
- sort - are these valid attributes for the given table?
  - convenient way to get list of attributes for a table
  - is the direction valid?
    - default direction strings

do we need some slightly higher-level structure, beyond just the rack request?
  query request?
  "Version must be a header blah blah" - lower level...
    ...things that are specific to the structure of the request
    ...just enough to trust you can transform to a query request
  "update date: must supply a date between..." - higher level

rack request ==> raw request validation ==> 
  ==> transformation ==> query request ==> higher level validation ==> 
  ==> transformation ==> query
          ...query request is a structy version of query
          this separates us from the particular rack request format details
            ...meaning those details can vary

Defaults:
  aimed at making the query stuff work out of the box
  FIRST GOAL: in fact, do this in integration / acceptance with a sqlite backend



SECOND GOAL: simulate public twitter, exactly

THIRD GOAL: solr


RackRequest
  .path
  .params

==> validation

default validation
  "zzz" is not a valid param.  valid params are "sort", "show"
  "ZZZ" is not a valid sort attribute.  valid sort attributes are "name", "sku", ...


/v1/widgets?sort=price.desc&show=id,price

...making it safe to make assumptions...

default rack mapping
  rack to query...
  query factory...
  ...parsing the criteria again...


Query.new(
  :version => 1, 
  :resource_type => "product", 
  :criteria => predicate,
  :show => 
  :sort => 
)




/v1/widgets?sort=price.desc&show=id,price
/v:version/:resource_type:criteria?sort=:sort&show=:show
  ...it's a plan for how to parse...

need to separate: criteria are here from are these criteria valid...

